;;Bresenham's line algorithm
;;attempt 1
;;where DX>DY - i.e. X major
;;and Y1>Y0     i.e. +ve
;;The input will be x-lo x-hi dx and dy/dx-lo dy/dx-hi which will be only the most
;;significant bits, thought this mask will only be important when we want to
;;store the delta in some compact form.


(defun draw-line-code ()
  (label :draw-line)
  (zp-w :x)
  (zp-w :y)
  (zp-w :grad)
  (zp-w :width)
  (zp-w :delta)
  
  (label :draw-line1)

  (with-namespace :draw-line
    ;;debugging variables
    (let ((xval nil)
	  (yval nil)
	  (grad nil)
	  (width nil)
	  (steps nil)
	  (delta nil)
	  (last-scr nil)
	  (last-bit nil))
      (dbg
	(setf steps 0) ;;how many x steps did we take so far?
	(setf xval (monitor-peek16 :x))
	(setf yval (monitor-peek16 :y))
	(setf grad (monitor-peek16 :grad))
	(setf delta (monitor-peek16 :delta))
	(setf width (monitor-peek16 :width))
	(setf last-bit nil)
	(setf last-scr nil)
	(dbg-assert (/= 0 width))
	(dbg-assert (<= (+ xval width) +screen-width+))
	(dbg-assert (< xval +screen-width+))
	(dbg-assert (< yval +screen-height+)))
      (mul40.zp :y)
      (dbg-assert (= (* 40 yval) (monitor-peek16 :y)))
      (adc16.zp (scradd 0 0) :y)
      (dbg-assert (= (scradd yval 0) (monitor-peek16 :y)))
      (dc "Now scr contains the screen address plus the vertical offset")
      (dc "Let us now get the bit and byte horizontal offset")
      (LDA.ZP (lo-add :x))
      (AND.IMM #x7 "Bit position")
      (TAX "Hold onto the bit position")
      (dc "Divide the x coord by 8, note that the high byte only has")
      (dc "one significant bit, so only one shift required and the")
      (dc "answer fits into A")
      (LSR.ZP (hi-add :x))
      (LDA.ZP (lo-add :x))
      (ROR)
      (LSR)
      (LSR)
      (dc "Now add the horizontal offset")
      (CLC)
      (ADC.ZP (lo-add :y))
      (STA.ZP (lo-add :y))
      (LDA.ZP (hi-add :y))
      (ADC 0)
      (STA.ZP (hi-add :y))
      (dc ":y now contains the address of the screen byte containing our first pixel")
      (dbg-assert (= (scradd yval (floor xval 8)) (monitor-peek16 :y)))
      (LDA.ABX :bits)
      (dbg-assert (= a (expt 2 (- 7 (logand xval 7))))
		  (format nil "a=~a xval=~a xval%7=~a" a xval (logand xval 7)))
      ;;the middle of the pixel is at 32768 in our fractional scheme
      (LDY 0)
      (STY.ZP (lo-add :delta))
      (LDX #x80)
      (STX.ZP (hi-add :delta))
      (dc "Now we are into Bresenham's algorithm")
      (dc "We increment x, and add the gradient to the accumulator")
      (dc "also decrement the width until it is zero")
      (label :plot-point)
      (TAX)
      (dc "A should hold the bit pattern of the point we wish to plot")
      ;;some assertions to ensure the bit pattern rotates from left to
      ;;right
      (dbg-assert (find a '(128 64 32 16 8 4 2 1)))
      (dbg (incf steps))
      (dbg-assert (/= a 0))
      (dbg-assert (or (null last-bit)
		      (or (and (= last-bit 1)
			       (= a 128))
			  (= a (/ last-bit 2))))
		  (format nil "Last Bit = ~a a = ~a" last-bit a))
      (dbg (setf last-bit a))
      ;;some assertions to ensure that if the bit pattern rotated to
      ;;the next byte, we are ahead by one byte in the screen address    
      (EOR.IZY :y);;DO WE HAVE TO GET AND READ THE SCREEN WHILE WE ARE
      ;;JUST SETTING THE BYTE? I THINK NOT!
      (STA.IZY :y "plot")
      (DEC.ZP (lo-add :width))
      (dc "branch less taken for this to check hi byte")
      (BEQ :done)
      (label :add-gradient)
      (dc "Add the gradient")
      (CLC)
      (LDA.ZP (lo-add :grad))
      (ADC.ZP (lo-add :delta))
      (STA.ZP (lo-add :delta))
      (LDA.ZP (hi-add :grad))
      (ADC.ZP (hi-add :delta))
      (STA.ZP (hi-add :delta))
      (dc "Now, if the carry is set, then we went over and need to increment Y")
      (dc "Guess what. To subtract 0x10000 we don't do anything")
      (BCS :step)
      (dc "We advance the X by a bit, then a byte if necessary")
      (TXA)
      (LSR)
      (BNE :plot-point)
      (dc "Advance by one screen byte")
      (inc16.zp :y)
      (LDA 128)
      (BNE :plot-point)
      (label :done)
      (DEC.ZP (hi-add :width))
      (BPL :add-gradient)
      (dc "we are done")
      (dbg-assert (= steps width))
      (RTS)
      (label :step)
      (dc "Advance the X by a bit, then a byte if necessary")
      (TXA)
      (LSR)
      (BEQ :xystep)
      (dc "Take a step in y only- x only moved one bit")
      (TAX)
      (CLC)
      (LDA 40)
      (ADC.ZP (lo-add :y))
      (STA.ZP (lo-add :y))
      (LDA.ZP (hi-add :y))
      (ADC 0)
      (STA.ZP (hi-add :y))
      (TXA)
      (BNE :plot-point)
      (label :xystep)
      (dc "Take a step in both x and y")
      (CLC)
      (LDA 41)
      (ADC.ZP (lo-add :y))
      (STA.ZP (lo-add :y))
      (LDA.ZP (hi-add :y))
      (ADC 0)
      (STA.ZP (hi-add :y))
      (LDA 128)
      (BNE :plot-point)
      (db :bits 128 64 32 16 8 4 2 1))))

(defun draw-test (x y width grad)
  (reset-compiler)
  (flet ((pass ()
	   (org #x600)
	   (zeropage)
	   (CLD)
	   (label :draw-test)

	   (call-memset 0 (scradd 0 0) +screen-memory-length+)
	   (call-memset 43 *char-memory-address* +char-memory-length+)
	   (label :start)
	   (sta16.zp x :x)
	   (sta16.zp y :y)
	   (sta16.zp grad :grad)
	   (sta16.zp width :width)
	   (JSR :draw-line1)
	   (BRK)
	   (draw-line-code)
	   (label :end)
	   (BRK)

	   (memset)))

	 (pass)
	 (let ((end *compiler-ptr*))
	   (pass)
	   (assert (= end *compiler-ptr*) nil "Build was not stable"))
	 (setf *compiler-final-pass* t)
	 (pass)
	 (format t "Build size ~a~%" (- *compiler-ptr* origin)))

  (monitor-reset #x600)
  (monitor-run)
  (update-vicky))
