(defun byte-width (b)
  (when (= 1 (logand 1 b)) (return-from byte-width 9))
  (when (= 2 (logand 2 b)) (return-from byte-width 8))
  (when (= 4 (logand 4 b)) (return-from byte-width 7))
  (when (= 8 (logand 8 b)) (return-from  byte-width 6))
  (when (= 16 (logand 16 b)) (return-from byte-width 5))
  (when (= 32 (logand 32 b)) (return-from byte-width 4))
  (when (= 64 (logand 64 b)) (return-from byte-width 3))
  (when (= 128 (logand 128 b)) (return-from byte-width 2)))

(defun reverse-word (word)
  (let ((bit #x8000)
	(tib #x0001)
	(value 0))
    (dotimes (i 16)
      (when (not (zerop (logand bit word)))
	(setf value (logior value tib)))
      (setf bit (ash bit -1))
      (setf tib (ash tib 1)))
    value))

(defparameter *x* 0)
(defparameter *y* 0)

(defparameter *buffer* (make-array 8192 :initial-element 0))

(defun defchar (font c data)
  (let ((y *y*))
    (dolist (d data)
      (setf (aref *buffer* (+ *x* (* 40 y))) d)
      (incf y)))
  (incf *x*)
  (when (= *x* 40)
    (setf *x* 0)
    (incf *y* 13)))

(setf *x* 0)
(setf *y* 0)
  
(defchar :medieval #\! '(96 224 224 224 96 96 96 64 0 64 224 64))
(defchar :medieval #\, '(0 0 0 0 0 0 0 64 224 96 64 128))
(defchar :medieval #\- '(0 0 0 0 0 62 124 0 0 0 0 0))
(defchar :medieval #\. '(0 0 0 0 0 0 0 0 0 64 224 64))
(defchar :medieval #\0 '(120 12 70 198 198 198 198 198 198 102 124 56))
(defchar :medieval #\1 '(224 96 96 96 96 96 96 96 96 96 96 64))
(defchar :medieval #\2 '(124 206 198 134 6 4 12 24 48 96 254 252))
(defchar :medieval #\3 '(252 12 8 16 56 124 12 12 12 24 48 96))
(defchar :medieval #\4 '(24 48 96 100 204 204 252 12 12 12 12 8))
(defchar :medieval #\5 '(120 128 128 240 248 28 12 12 12 24 48 96))
(defchar :medieval #\6 '(48 96 192 192 220 206 198 198 198 102 124 56))
(defchar :medieval #\7 '(126 6 12 12 24 24 48 48 48 112 96 64))
(defchar :medieval #\8 '(94 198 198 230 124 56 124 206 198 198 68 56))
(defchar :medieval #\9 '(124 204 198 198 198 230 118 6 6 12 24 48))
(defchar :medieval #\? '(120 204 12 12 12 24 48 32 0 32 112 32))
(defchar :medieval #\A '(48 120 108 108 108 198 198 254 254 198 198 132))
(defchar :medieval #\B '(248 108 102 102 102 108 102 102 102 102 124 56))
(defchar :medieval #\C '(126 198 196 192 192 192 192 192 192 224 126 56))
(defchar :medieval #\D '(248 108 102 102 102 102 102 102 102 102 124 56))
(defchar :medieval #\E '(252 96 96 96 126 252 96 96 96 96 126 124))
(defchar :medieval #\F '(252 96 96 96 126 252 96 96 96 96 96 64))
(defchar :medieval #\G '(126 198 196 192 192 192 204 198 198 102 124 56))
(defchar :medieval #\H '(238 102 102 102 126 254 102 102 102 102 100 68))
(defchar :medieval #\I '(224 96 96 96 96 96 96 96 96 96 96 64))
(defchar :medieval #\J '(112 48 48 48 48 48 48 48 48 48 96 192))
(defchar :medieval #\K '(238 98 100 104 112 112 120 104 108 100 102 114))
(defchar :medieval #\L '(224 96 96 96 96 96 96 96 96 96 126 124))
(defchar :medieval #\M '(198 198 108 108 108 124 214 214 198 198 198 132))
(defchar :medieval #\N '(230 118 118 126 126 126 110 110 102 102 98 66))
(defchar :medieval #\O '(120 28 70 198 198 198 198 198 198 230 124 56))
(defchar :medieval #\P '(248 108 102 102 102 102 108 96 96 96 96 64))
(defchar :medieval #\Q '(120 204 198 198 198 198 198 198 198 100 120 30))
(defchar :medieval #\R '(252 100 102 102 102 108 102 102 102 102 100 68))
(defchar :medieval #\S '(124 200 192 224 112 56 28 14 6 70 252 120))
(defchar :medieval #\T '(252 16 48 48 48 48 48 48 48 48 48 32))
(defchar :medieval #\U '(204 204 204 204 204 204 204 204 204 204 254 104))
(defchar :medieval #\V '(66 198 198 198 198 108 108 108 108 56 56 16))
(defchar :medieval #\W '(218 218 218 218 218 218 218 218 108 108 108 36))
(defchar :medieval #\X '(196 196 104 120 48 48 56 88 76 140 134 196))
(defchar :medieval #\Y '(206 194 98 100 100 52 56 24 24 24 16 96))
(defchar :medieval #\Z '(254 124 12 8 24 16 48 32 96 64 254 124))
(defchar :medieval #\a '(0 48 120 24 12 124 206 198 246 100 0 0))
(defchar :medieval #\b '(224 96 96 100 110 102 102 102 102 102 102 56))
(defchar :medieval #\c '(0 28 126 198 196 192 192 96 126 56 0 0))
(defchar :medieval #\d '(7 3 3 19 59 51 51 51 51 51 51 30))
(defchar :medieval #\e '(0 60 126 198 198 220 192 224 124 56 0 0))
(defchar :medieval #\f '(60 110 100 96 126 252 96 96 96 96 96 64))
(defchar :medieval #\g '(0 126 204 204 200 96 120 28 70 198 198 124))
(defchar :medieval #\h '(224 96 96 108 118 102 102 102 102 102 70 4))
(defchar :medieval #\i '(64 224 64 32 96 224 96 96 96 96 64 0))
(defchar :medieval #\j '(32 112 32 16 48 112 48 48 48 48 96 192))
(defchar :medieval #\k '(224 98 103 98 100 120 120 108 100 66 0 0))
(defchar :medieval #\l '(224 96 96 96 96 96 96 96 96 96 96 64))
(defchar :medieval #\m '(0 198 198 108 108 254 214 214 198 132 0 0))
(defchar :medieval #\n '(0 44 246 102 102 102 102 102 102 68 0 0))
(defchar :medieval #\o '(0 56 124 12 70 198 198 102 124 56 0 0))
(defchar :medieval #\p '(0 44 246 102 102 102 102 102 108 96 96 64))
(defchar :medieval #\q '(0 100 222 204 204 204 204 204 108 12 12 8))
(defchar :medieval #\r '(0 36 238 118 100 96 96 96 96 112 0 0))
(defchar :medieval #\s '(0 28 62 100 112 60 14 70 252 120 0 0))
(defchar :medieval #\t '(16 48 48 126 252 48 48 48 60 24 0 0))
(defchar :medieval #\u '(0 34 230 102 102 102 102 102 126 52 0 0))
(defchar :medieval #\v '(0 36 238 98 114 50 52 60 24 24 0 0))
(defchar :medieval #\w '(0 74 218 218 218 218 218 126 108 36 0 0))
(defchar :medieval #\x '(0 44 230 116 60 24 60 76 198 100 0 0))
(defchar :medieval #\y '(0 36 238 98 114 50 52 60 24 24 48 96))
(defchar :medieval #\z '(0 64 254 124 8 16 32 64 254 252 0 0))

;; some useful functions
