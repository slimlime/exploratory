(defparameter *index->base64* "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
(defparameter *base64->index* (make-array 123 :element-type '(unsigned-byte 8)))

(loop for i from 0 to 63 do
     (setf (elt *base64->index* (char-code (elt *index->base64* i))) i))

(defun base64encode (data)
  (let ((len (length data)))
    (if (= len 0)
	""
	(let* ((b1 0) (b2 0) (b3 0)
	       (src 0)
	       (dst 0)
	       (str (make-string (* 4 (ceiling len 3)))))
	  (tagbody
	   :next
	     (when (< src (* 3 (floor len 3)))
	       (setf b1 (elt data src))
	       (incf src)
	       (setf b2 (elt data src))
	       (incf src)
	       (setf b3 (elt data src))
	       (incf src)
	       (setf (char str dst)
		     (elt *index->base64* (ash b1 -2)))
	       (incf dst)
	       (setf (char str dst)
		     (elt *index->base64*
			  (logior (ash (logand b1 3) 4)
				  (ash b2 -4))))
	       (incf dst)
	       (setf (char str dst)
		     (elt *index->base64*
			  (logior (ash (logand b2 15) 2)
				  (ash b3 -6))))
	       (incf dst)
	       (setf (char str dst)
		     (elt *index->base64* (logand b3 63)))
	       (incf dst)
	       (go :next))
	     (let ((remainder (- len src)))
	       (unless (= 0 remainder)
		 (if (= 2 (- len src))
		     (progn
		       (setf b1 (elt data src))
		       (incf src)
		       (setf b2 (elt data src))
		       (setf (char str dst)
			     (elt *index->base64* (ash b1 -2)))
		       (incf dst)
		       (setf (char str dst)
			     (elt *index->base64*
				  (logior (ash (logand b1 3) 4)
					  (ash b2 -4))))
		       (incf dst)
		       (setf (char str dst)
			     (elt *index->base64*
				  (ash (logand b2 15) 2)))
		       (incf dst)
		       (setf (char str dst) #\=))
		     (progn
		       (setf b1 (elt data src))
		       (setf (char str dst)
			     (elt *index->base64* (ash b1 -2)))
		       (incf dst)
		       (setf (char str dst)
			     (elt *index->base64*
				  (ash (logand b1 3) 4)))
		       (incf dst)
		       (setf (char str dst) #\=)
		       (incf dst)
		       (setf (char str dst) #\=))))))
	  str))))


(defun base64decode (str)
  (let ((len (length str)))
    (when (= 0 len)
      (return-from base64decode #()))
    (multiple-value-bind (groups remainder)
	(floor len 4)
      (when (/= 0 remainder)
	(return-from base64decode #()))
      (let ((src 0)
	    (dst 0)
	    (bits 0)
	    (outlen (* 3 groups)))
	(when (char= (char str (1- len)) #\=)
	  (decf groups)
	  (decf outlen))
	(when (char= (char str (- len 2)) #\=)
	  (decf outlen))
	(let ((data (make-array outlen
				:fill-pointer outlen
				:element-type '(unsigned-byte 8))))	      
	  (tagbody
	   :next
	     (when (< src (* 4 groups))
	       (setf bits (elt *base64->index* (char-code (char str src))))
	       (incf src)
	       (dotimes (_ 3)
		 (setf bits (logior (ash bits 6)
				    (elt *base64->index* (char-code (char str src)))))
		 (incf src))
	       (setf (elt data dst) (ash bits -16))
	       (incf dst)
	       (setf (elt data dst) (logand #xff (ash bits -8)))
	       (incf dst)
	       (setf (elt data dst) (logand #xff bits))
	       (incf dst)
	       (go :next)))
	  (setf remainder (- outlen dst))
	  (unless (= remainder 0)
	    (if (= remainder 2)
		(progn
		  (setf bits (elt *base64->index* (char-code (char str src))))
		  (incf src)
		  (setf bits (logior (ash bits 6)
				     (elt *base64->index* (char-code (char str src)))))
		  (incf src)
		  (setf bits (logior (ash bits 6)
				     (elt *base64->index* (char-code (char str src)))))
		  (setf (elt data dst) (ash bits -10))
		  (incf dst)
		  (setf (elt data dst) (logand #xff (ash bits -2))))
		(progn
		  (setf bits (elt *base64->index* (char-code (char str src))))
		  (incf src)
		  (setf bits (logior (ash bits 6)
				     (elt *base64->index* (char-code (char str src)))))
		  (setf (elt data dst) (ash bits -4)))))
	  data)))))

(defun test-base64 (data str)
  (assert (string= (base64encode data) str))
  (assert (equalp (base64decode str) data)))

(test-base64 #(                    ) "")
(test-base64 #(97                  ) "YQ==")
(test-base64 #(97 98               ) "YWI=")
(test-base64 #(97 98 99            ) "YWJj")
(test-base64 #(97 98 99 100        ) "YWJjZA==")
(test-base64 #(97 98 99 100 101    ) "YWJjZGU=")
(test-base64 #(97 98 99 100 101 102) "YWJjZGVm")

(test-base64 #(0 0 44) "AAAs")
(test-base64 #(87 138 231) "V4rn") 

#|
(time
 (dotimes (i (1- (* 256)))
   (let ((vec (make-array 1)))
     (setf (elt vec 0) i)
     (let ((str (base64encode vec)))
       (assert (equalp vec (base64decode str)))))))

(time
 (dotimes (i (1- (* 256 256)))
   (let ((vec (make-array 2)))
     (setf (elt vec 0) (ash i -8))
     (setf (elt vec 1) (logand #xff i))
     (let ((str (base64encode vec)))
       (assert (equalp vec (base64decode str)))))))

(time
 (dotimes (i (1- (* 256 256 256)))
   (let ((vec (make-array 3)))
     (setf (elt vec 0) (ash i -16))
     (setf (elt vec 1) (logand #xff (ash i -8)))
     (setf (elt vec 2) (logand #xff i))
     (let ((str (base64encode vec)))
       (assert (equalp vec (base64decode str)))))))
|#
