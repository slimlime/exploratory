(defparameter *index->base64* "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrtstuvwxyz0123456789+/")
(defparameter *base64->index* (make-array 123 :element-type '(unsigned-byte 8)))

(loop for i from 0 to 63 do
     (setf (elt *base64->index* (char-code (elt *index->base64* i))) i))

(defun base64encode (data)
  (let ((len (length data)))
    (if (= len 0)
	""
	(let* ((b1 0) (b2 0) (b3 0)
	       (trios (floor len 3))
	       (src 0)
	       (dst 0)
	       (str (make-string (* 4 (ceiling len 3)))))
	  (tagbody
	   :next
	     (when (< src (* 3 trios))
	       (setf b1 (elt data src))
	       (incf src)
	       (setf b2 (elt data src))
	       (incf src)
	       (setf b3 (elt data src))
	       (incf src)
	       (setf (char str dst)
		     (elt *index->base64* (ash b1 -2)))
	       (incf dst)
	       (setf (char str dst)
		     (elt *index->base64*
			  (logior (ash (logand b1 3) 4)
				  (ash b2 -4))))
	       (incf dst)
	       (setf (char str dst)
		     (elt *index->base64*
			  (logior (ash (logand b2 15) 2)
				  (ash b3 -6))))
	       (incf dst)
	       (setf (char str dst)
		     (elt *index->base64* (logand b3 63)))
	       (incf dst)
	       (go :next))
	     (if (= 2 (- len src))
		 (progn
		   (setf b1 (elt data src))
		   (incf src)
		   (setf b2 (elt data src))
		   (setf (char str dst)
			 (elt *index->base64* (ash b1 -2)))
		   (incf dst)
		   (setf (char str dst)
			 (elt *index->base64*
			      (logior (ash (logand b1 3) 4)
				      (ash b2 -4))))
		   (incf dst)
		   (setf (char str dst)
			 (elt *index->base64*
			      (ash (logand b2 15) 2)))
		   (incf dst)
		   (setf (char str dst) #\=))
		 (if (= 1 (- len src))
		     (progn
		       (setf b1 (elt data src))
		       (setf (char str dst)
			     (elt *index->base64* (ash b1 -2)))
		       (incf dst)
		       (setf (char str dst)
			     (elt *index->base64*
				  (ash (logand b1 3) 4)))
		       (incf dst)
		       (setf (char str dst) #\=)
		       (incf dst)
		       (setf (char str dst) #\=)))))
	  str))))

(assert (string= (base64encode #(                    )) ""))
(assert (string= (base64encode #(97                  )) "YQ=="))
(assert (string= (base64encode #(97 98               )) "YWI="))
(assert (string= (base64encode #(97 98 99            )) "YWJj"))
(assert (string= (base64encode #(97 98 99 100        )) "YWJjZA=="))
(assert (string= (base64encode #(97 98 99 100 101    )) "YWJjZGU="))
(assert (string= (base64encode #(97 98 99 100 101 102)) "YWJjZGVm"))

(defun base64decode (str)
  (let ((len (length str)))
    (multiple-value-bind (quads remainder)
	(floor len 4)
      (if (/= 0 remainder)
	  #()
	  (progn
	    (when (char= (char str (1- len)))
	      (decf len))
	    (when (char= (char str (1- len)))
	      (decf len))
	    
